<!DOCTYPE html>
<html>

<style>
    .buttonClass {
        width: 200px;
        height: 100px;
        background-color: limegreen;
        color: white;
        font-size: 20px;
        font-weight: bold;
    }

    body {
        background-image: url('bg.png');
        background-repeat: repeat;
        font-size: 20px;
        font-family: monospace;
    }


    details > textarea {
        vertical-align: middle;
        resize: none;
        font-weight: bold;
    }
</style>

<body>
<input type="button" class="buttonClass" value="download" id="downloadButton">
<a href="index_old.htm" style="color: darkgray">Switch to the old version</a>
<details>
    <br>
    <summary>additional settings</summary>
    <label for="chunkSize">Size of the single chunk is X links: </label>
    <textarea id="chunkSize" rows="1" cols="1">10</textarea>
    <br>
    <label for="waitSeconds">Wait for X seconds between downloading chunks:</label>
    <textarea id="waitSeconds" rows="1" cols="1">5</textarea>
</details>
<p>place your links below:</p>
<textarea id="linksTextArea" rows="900" cols="220">
</textarea>
</body>

<head>
    <script>
        const sleep = (milliseconds) => {
            return new Promise(resolve => setTimeout(resolve, milliseconds))
        };

        const isNotEmpty = (str) => {
            return (str || 0 < str.length);
        };

        document.getElementById('downloadButton').onclick = function () {
            downloadTheLinksInTextArea();
        };

        function isPdf(urlForDownload) {
            return urlForDownload.toLowerCase().endsWith(".pdf");
        }

        function getUnique(array) {
            var seen = {};
            return array.filter(function (item) {
                return seen.hasOwnProperty(item) || item===null|| item==="" ? false : (seen[item] = true);
            });
        }

        async function downloadTheLinksInTextArea() {
            const waitSeconds = document.getElementById('waitSeconds').value;
            const chunkSize = document.getElementById('chunkSize').value;
            var lines = getUnique(document.getElementById('linksTextArea').value.split('\n'));
            var pdfCounter = 0;
            var counter = 0;
            var renamingPropertiesData = [];
            for (urlForDownload of lines) {
                if (!isNotEmpty(urlForDownload)) continue;

                let fileName = urlForDownload.replace(/\s+/, '_').split('_');
                download_file(urlForDownload, fileName);
                if (isPdf(urlForDownload)) {
                    var pdfName = urlForDownload.split(/_(.+)/)[1];
                    if (pdfCounter === 0) {
                        renamingPropertiesData.push("\"download.pdf\"");
                        renamingPropertiesData.push(pdfName);
                    } else {
                        renamingPropertiesData.push("\"download" + " (" + pdfCounter + ").pdf\"");
                        renamingPropertiesData.push(pdfName);
                    }
                    pdfCounter++;
                }
                counter++;
                if (counter % chunkSize === 0) {
                    await sleep(waitSeconds * 1000);
                }

            }
            if (renamingPropertiesData.length !== 0) {
                var batchFileContent = "";
                for (let i = 0; i < renamingPropertiesData.length; i++) {
                    var isFromName = i % 2 === 0;
                    if (isFromName) {
                        batchFileContent += "ren " + renamingPropertiesData[i];
                    } else {
                        batchFileContent += " " + renamingPropertiesData[i] + "\n";
                    }
                }
                saveFileFromString("rename.bat", batchFileContent);
            }
        }

        function saveFileFromString(filename, text) {
            var element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }

        function download_file(fileURL, fileName) {
            if (!window.ActiveXObject) {// for non-IE
                var save = document.createElement('a');
                save.href = fileURL;
                save.target = '_blank';
                var filename = fileURL.substring(fileURL.lastIndexOf('/') + 1);
                save.download = fileName || filename;
                if (navigator.userAgent.toLowerCase().match(/(ipad|iphone|safari)/) && navigator.userAgent.search("Chrome") < 0) {
                    document.location = save.href;
                } else {// window event not working here
                    var evt = new MouseEvent('click', {
                        'view': window,
                        'bubbles': true,
                        'cancelable': false
                    });
                    save.dispatchEvent(evt);
                    (window.URL || window.webkitURL).revokeObjectURL(save.href);
                }
            } else if (!!window.ActiveXObject && document.execCommand) {// for IE < 11
                var _window = window.open(fileURL, '_blank');
                _window.document.close();
                _window.document.execCommand('SaveAs', true, fileName || fileURL);
                _window.close();
            }
        }
    </script>
</head>

</html>
